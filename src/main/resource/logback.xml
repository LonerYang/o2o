<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当配置文件修改时，是否重新加载 默认值为true
	 scanPeriod:当scan属性为true时，此属性生效，不指定单位的话默认单位是毫秒，不写该属性默认值是一分钟
	 debug:是否打印出logback内部日志信息，实时查看logback运行状态，一般设置为false，
	 			因为logback内部已经很健壮了，没必要再去看运行出没出错
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义参数常量 -->
	<!-- TRACE<DEBUG<INFO<WARN<ERROR -->
	<!-- eg:logger.trace("msg") logger.debug("msg")...-->
	<property name="log.level" value="debug"/>
	<property name="log.maxHistory" value="30"/>
	<!-- ${catalina.base}:tomcat的根目录 -->
	<property name="log.filePath" value="${catalina.base}/logs/webapps"/>
	<property name="log.pattern"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} -%msg%n"/>
	<!-- 控制台设置 -->
	<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>
	</appender>

	<!-- <appender>每个日志级别的配置 -->
	<!-- DEBUG -->
	<appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名
			每天的日志文件名称都是这个
		 -->
		<file>${log.filePath}/debug.log</file>

		<!-- 滚动的策略：决定RollingFileAppender的行为 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<!-- 把前面一天的日志存在哪里，以什么形式来存的 -->
			<fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
			<!-- 文件最大保存时间-->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 将日志信息通过自定的格式 格式化成字符串并输出 -->
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>

		<!-- 设置过滤器过滤哪个级别 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<!-- 如果连接的的日志级别是debug就记录下来 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 如果级别不是debug就将它过滤掉 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- INFO -->
	<appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名 -->
		<file>${log.filePath}/info.log</file>

		<!-- 滚动的策略：决定RollingFileAppender的行为-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
			<!-- 文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 将日志信息通过自定的格式 格式化成字符串并输出 -->
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>

		<!-- 设置级别 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- WARN -->
	<appender name="warnAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名 -->
		<file>${log.filePath}/warn.log</file>

		<!-- 滚动的策略：决定RollingFileAppender的行为-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/warn/warn.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
			<!-- 文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 将日志信息通过自定的格式 格式化成字符串并输出 -->
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>

		<!-- 设置级别 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- ERROR -->
	<appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名 -->
		<file>${log.filePath}/error.log</file>

		<!-- 滚动的策略：决定RollingFileAppender的行为-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
			<!-- 文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>

		<!-- 将日志信息通过自定的格式 格式化成字符串并输出 -->
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>

		<!-- 设置级别 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- additivity默认值是true，就会继承root根下面的<appender-ref>引入的级别配置
	 	name:指定哪个包下面使用日志
	 -->
	<logger name="com.ahead" level="${log.level}" additivity="true">
		<appender-ref ref="debugAppender"/>
		<appender-ref ref="infoAppender"/>
		<appender-ref ref="errorAppender"/>
		<appender-ref ref="warnAppender"/>
	</logger>
	<root level="info">
		<appender-ref ref="consoleAppender"/>
	</root>
</configuration>